{"version":3,"sources":["components/sample-component/sample-component.jsx","app/app.jsx","serviceWorker.js","index.js"],"names":["SampleComponent","props","state","users","prevProps","prevState","console","log","axios","get","then","response","data","result","map","nom","prenom","email","setState","id","name","age","p","key","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wPAkIeA,E,kDA9Hf,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACVC,MAAO,IAJO,E,8DAiBDC,EAAWC,GAAY,IAAD,OACtCC,QAAQC,IAAI,OACZC,IAAMC,IAAN,0BACCC,MAAK,SAAAC,GACJL,QAAQC,IAAI,OAAQI,EAASC,KAAMD,GAInC,IAAIE,EAASF,EAASC,KAAKE,KAAI,SAAAF,GAAI,MAAG,CACpCG,IAAKH,EAAKG,IAAKC,OAAQJ,EAAKI,OAAQC,MAAOL,EAAKK,UAGlD,EAAKC,SAAS,CACZf,MAAQU,IAEVP,QAAQC,IAAI,MAAMM,GAClBP,QAAQC,IAAI,QAAQ,EAAKL,Y,+BAgE7B,OACI,0DAEE,4BAbY,CACd,CAACiB,GAAG,EAAGC,KAAM,OAAOC,IAAI,IACxB,CAACF,GAAG,EAAEC,KAAM,SAASC,IAAI,IACzB,CAACF,GAAG,EAAEC,KAAM,MAAMC,IAAI,IACtB,CAACF,GAAG,EAAEC,KAAM,OAAOC,IAAI,KAUdP,KAAI,SAAAQ,GAAC,OAAI,wBAAIC,IAAKD,EAAEH,IAAKG,EAAEF,UAHpC,IAKE,4BACDI,KAAKtB,MAAMC,MAAMW,KAAI,SAAAQ,GAAC,OAAI,wBAAIC,IAAKD,EAAEP,KAAMO,EAAEP,SAN9C,IAQGT,QAAQC,IAAI,SAASiB,KAAKtB,MAAMC,MAAOqB,KAAKtB,MAAMC,MAAMW,KAAI,SAAAF,GAAI,OAAEA,MAClEY,KAAKtB,MAAMC,MAAMW,KAAI,SAAAF,GAEpB,OACE,6BACDN,QAAQC,IAAI,WAAYK,GADvB,SAEKA,EAAKG,IAFV,YAGQH,EAAKI,OAHb,WAIOJ,EAAKK,e,GAnHQQ,aCMfC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.8368dd03.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios'\n\nclass SampleComponent extends Component {\nconstructor(props) {\n  super(props)\n\n  this.state = {\n     users: [] \n//   this.state = {\n//      users: [{\n//        nom:'',\n//        prenom:'',\n//        email:''\n//      }] \n// }\n  }\n}\n\n\n\ncomponentDidMount(prevProps, prevState) {\n  console.log('cdu');\n  axios.get(`http://localhost:8000/`)\n  .then(response=>{\n    console.log('json', response.data, response);\n    // response.data.json()\n\n    // var copyState = this.state.users.slice()\n    var result = response.data.map(data=>({\n      nom: data.nom, prenom: data.prenom, email: data.email\n    })\n    )\n    this.setState({\n      users:  result\n    })\n    console.log('map',result);\n    console.log('satte',this.state);\n    \n  })\n  \n}\n\n// componentDidMount(prevProps, prevState) {\n//   console.log('cdu');\n//   axios.get(`http://localhost:8000/`)\n//   .then(response=>{\n//     console.log('json', response.data, response);\n//     // response.data.json()\n\n//     // var copyState = this.state.users.slice()\n//     var result = response.data.map(data=>({\n//       nom: data.nom, prenom: data.prenom, email: data.email\n//     })\n//     )\n//     this.setState({\n//       users: [...this.state.users, result]\n//     })\n//     console.log('map',result);\n//     console.log('satte',this.state);\n    \n//   })\n  \n// }\n// componentDidMount(prevProps, prevState) {\n//   console.log('cdu');\n//   axios.get(`http://localhost:8000/`)\n//   .then(function (response) {\n//     console.log('json', response.data, response);\n//     // response.data.json()\n\n//     // var copyState = this.state.users.slice()\n//     var result = response.data.map(data=>({\n//       nom: data.nom, prenom: data.prenom, email: data.email\n//     }),this.setState(state => {\n//       const user = state.users.push(result)\n//       return{\n//         user\n//       }\n//     }) \n//     )\n//     console.log('map',result);\n    \n//   })\n  \n// }\n\n\n\n render(){\n\n  const friends = [\n    {id:1, name: 'Dave',age:50},\n    {id:2,name: 'Kellie',age:42},\n    {id:3,name: 'Max',age:12},\n    {id:2,name: 'Jack',age:12}\n];\n\n\n\n\nreturn (\n    <div>\n      This is a sample component\n      <ul>\n    {friends.map(p => <li key={p.id}>{p.name}</li>)}\n  </ul>;\n      <ul>\n    {this.state.users.map(p => <li key={p.nom}>{p.nom}</li>)}\n  </ul>;\n      {console.log('return',this.state.users, this.state.users.map(data=>data))}\n      {this.state.users.map(data=>\n      {\n        return(\n          <div>\n        {console.log('map.....', data)}\n        nom : {data.nom}\n        prenom : {data.prenom}\n        email : {data.email}\n        </div>\n        )\n        \n      \n      })}\n    </div>\n  );\n }\n  \n}\n\nexport default SampleComponent","import React from 'react';\nimport SampleComponent  from '../components/sample-component/sample-component';\n\nfunction App() {\n  return (\n    <SampleComponent />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}